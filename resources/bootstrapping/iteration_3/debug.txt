git ref:eae69b1c258f1ac5e06b0d013402468c5c065d20

INSTANCES USED
(<class 'nala.preprocessing.spliters.NLTKSplitter'>, {})
(<class 'nala.preprocessing.tokenizers.TmVarTokenizer'>, {})
(<class 'nala.features.simple.SimpleFeatureGenerator'>, {})
(<class 'nala.features.stemming.PorterStemFeatureGenerator'>, {'stemmer': <PorterStemmer>})
(<class 'nala.features.tmvar.TmVarFeatureGenerator'>, {'reg_mutat_word': re.compile('(deletion|delta|elta|insertion|repeat|inversion|deletions|insertions|repeats|inversions)'), 'reg_prot_symbols4': re.compile('[CISQMNPKDTFAGHLRWVEYX]$'), 'reg_type1': re.compile('[cgrm]$'), 'reg_mutat_article': re.compile('(single|a|one|two|three|four|five|six|seven|eight|nine|ten|[0-9]+|[0-9]+\\.[0-9]+)'), 'reg_shape_chars_plus': re.compile('[A-Za-z]+'), 'reg_char_simple_bracket': re.compile('[\\(\\)]'), 'reg_mutat_type': re.compile('(del|ins|dup|tri|qua|con|delins|indel)'), 'reg_rs_code1': re.compile('(rs|RS|Rs)[0-9]'), 'reg_frameshift_type': re.compile('(fs|fsX|fsx)'), 'reg_shape_nr_plus': re.compile('[0-9]+'), 'reg_chr_keys': re.compile('(q|p|q[0-9]+|p[0-9]+|qter|pter|XY|t)'), 'reg_prot_symbols3': re.compile('(ys|le|er|ln|et|sn|ro|ys|sp|hr|he|la|ly|is|eu|rg|rp|al|lu|yr)$'), 'reg_mutat_byte': re.compile('(kb|mb)'), 'reg_dna_symbols': re.compile('[ATCGUatcgu]$'), 'reg_shape_lc_plus': re.compile('[a-z]+'), 'reg_shape_nr': re.compile('[0-9]'), 'reg_char_square_bracket': re.compile('[\\[\\]]'), 'reg_mutat_basepair': re.compile('(base|bases|pair|amino|acid|acids|codon|postion|postions|bp|nucleotide|nucleotides)'), 'reg_spec_chars': re.compile('[-;:,.>+_]'), 'reg_shape_lc': re.compile('[a-z]'), 'reg_shape_chars': re.compile('[A-Za-z]'), 'reg_prot_symbols2': re.compile('(cys|ile|ser|gln|met|asn|pro|lys|asp|thr|phe|ala|gly|his|leu|arg|trp|val|glu|tyr|fs|fsx)$'), 'reg_shape_uc': re.compile('[A-Z]'), 'reg_prot_symbols1': re.compile('(glutamine|glutamic|leucine|valine|isoleucine|lysine|alanine|glycine|aspartate|methionine|threonine|histidine|aspartic|asparticacid|arginine|asparagine|tryptophan|proline|phenylalanine|cysteine|serin), 'reg_char_slashes': re.compile('[\\/\\\\]'), 'reg_rs_code2': re.compile('(rs|RS|Rs)$'), 'reg_char_curly_bracket': re.compile('[\\{\\}]'), 'reg_shape_uc_plus': re.compile('[A-Z]+'), 'reg_type12': re.compile('(ivs|ex|orf)$')})
(<class 'nala.features.tmvar.TmVarDictionaryFeatureGenerator'>, {'patterns': [re.compile('([cgrm]\\.[ATCGatcgu /><\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+(inv|del|ins|dup|tri|qua|con|delins|indel)[ATCGatcgu0-9_\\.:]*)'), re.compile('(IVS[ATCGatcgu /><\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+(del|ins|dup|tri|qua|con|delins|indel)[ATCGatcgu0-9_\\.:]*)'), re.compile('([cgrm]\\.[ATCGatcgu />\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+)'), re.compile('(IVS[ATCGatcgu />\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+)'), re.compile('([cgrm]\\.[ATCGatcgu][0-9]+[ATCGatcgu])'), re.compile('([ATCGatcgu][0-9]+[ATCGatcgu])'), re.compile('([0-9]+(del|ins|dup|tri|qua|con|delins|indel)[ATCGatcgu]*)'), re.compile('([p]\\.[CISQMNPKDTFAGHLRWVEYX /><\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+(inv|del|ins|dup|tri|qua|con|delins|indel|fsX|fsx|fsx|fs)[CISQMNPKDTFAGHLRWVEYX /><\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]*)'), re.compile('([p]\\.[CISQMNPKDTFAGHLRWVEYX />\\?\\(\\)\\[\\];:\\*_\\-\\+0-9]+)'), re.compile('([p]\\.[A-Z][a-z]{0,2}[\\W\\-]{0,1}[0-9]+[\\W\\-]{0,1}[A-Z][a-z]{0,2})'), re.compile('([p]\\.[A-Z][a-z]{0,2}[\\W\\-]?[0-9]+[\\W\\-]?(fs|fsx|fsX))')]})
(<class 'nala.features.window.WindowFeatureGenerator'>, {'include_list': ['pattern0[0]', 'pattern1[0]', 'pattern2[0]', 'pattern3[0]', 'pattern4[0]', 'pattern5[0]', 'pattern6[0]', 'pattern7[0]', 'pattern8[0]', 'pattern9[0]', 'pattern10[0]', 'word[0]', 'stem[0]'], 'template': (-3, -2, -1, 1, 2, 3)})
FEATURES USED
'dna_symbols[0]'
'mutat_article_bp[0]'
'mutat_type[0]'
'mutat_word[0]'
'num_alpha[0]'
'num_has_chr_key[0]'
'num_lo[0]'
'num_nr[0]'
'num_spec_chars[0]'
'num_up[0]'
'pattern0[-1]'
'pattern0[-2]'
'pattern0[-3]'
'pattern0[0]'
'pattern0[1]'
'pattern0[2]'
'pattern0[3]'
'pattern10[-1]'
'pattern10[-2]'
'pattern10[-3]'
'pattern10[0]'
'pattern10[1]'
'pattern10[2]'
'pattern10[3]'
'pattern1[-1]'
'pattern1[-2]'
'pattern1[-3]'
'pattern1[0]'
'pattern1[1]'
'pattern1[2]'
'pattern1[3]'
'pattern2[-1]'
'pattern2[-2]'
'pattern2[-3]'
'pattern2[0]'
'pattern2[1]'
'pattern2[2]'
'pattern2[3]'
'pattern3[-1]'
'pattern3[-2]'
'pattern3[-3]'
'pattern3[0]'
'pattern3[1]'
'pattern3[2]'
'pattern3[3]'
'pattern4[-1]'
'pattern4[-2]'
'pattern4[-3]'
'pattern4[0]'
'pattern4[1]'
'pattern4[2]'
'pattern4[3]'
'pattern5[-1]'
'pattern5[-2]'
'pattern5[-3]'
'pattern5[0]'
'pattern5[1]'
'pattern5[2]'
'pattern5[3]'
'pattern6[-1]'
'pattern6[-2]'
'pattern6[-3]'
'pattern6[0]'
'pattern6[1]'
'pattern6[2]'
'pattern6[3]'
'pattern7[-1]'
'pattern7[-2]'
'pattern7[-3]'
'pattern7[0]'
'pattern7[1]'
'pattern7[2]'
'pattern7[3]'
'pattern8[-1]'
'pattern8[-2]'
'pattern8[-3]'
'pattern8[0]'
'pattern8[1]'
'pattern8[2]'
'pattern8[3]'
'pattern9[-1]'
'pattern9[-2]'
'pattern9[-3]'
'pattern9[0]'
'pattern9[1]'
'pattern9[2]'
'pattern9[3]'
'prefix1[0]'
'prefix2[0]'
'prefix3[0]'
'prefix4[0]'
'prefix5[0]'
'protein_symbols[0]'
'rs_code[0]'
'shape1[0]'
'shape2[0]'
'shape3[0]'
'shape4[0]'
'stem[-1]'
'stem[-2]'
'stem[-3]'
'stem[0]'
'stem[1]'
'stem[2]'
'stem[3]'
'suffix1[0]'
'suffix2[0]'
'suffix3[0]'
'suffix4[0]'
'suffix5[0]'
'type1[0]'
'type2[0]'
'word[-1]'
'word[-2]'
'word[-3]'
'word[0]'
'word[1]'
'word[2]'
'word[3]'